remotecfg {
	url            = "https://fleet-management-prod-008.grafana.net"
	id             = "j-env-nb"
	poll_frequency = "60s"

	basic_auth {
		username = "1041430"
		password = "glc_eyJvIjoiMTIyNTM3MSIsIm4iOiJzdGFjay0xMDQxNDMwLWFsbG95LXNiZ2xmai1hY2MtcG9sLXRva2VuIiwiayI6IjRtb1lBS2U0dUM3MTB3NDJ3MVlSOTBGYiIsIm0iOnsiciI6InByb2QtdXMtZWFzdC0wIn19"
	}
}

prometheus.remote_write "metrics_service" {
	endpoint {
		url = "https://prometheus-prod-13-prod-us-east-0.grafana.net/api/prom/push"

		basic_auth {
			username = "1799849"
			password = "glc_eyJvIjoiMTIyNTM3MSIsIm4iOiJzdGFjay0xMDQxNDMwLWFsbG95LXNiZ2xmai1hY2MtcG9sLXRva2VuIiwiayI6IjRtb1lBS2U0dUM3MTB3NDJ3MVlSOTBGYiIsIm0iOnsiciI6InByb2QtdXMtZWFzdC0wIn19"
		}
	}
}

loki.write "grafana_cloud_loki" {
	endpoint {
		url = "https://logs-prod-006.grafana.net/loki/api/v1/push"

		basic_auth {
			username = "999210"
			password = "glc_eyJvIjoiMTIyNTM3MSIsIm4iOiJzdGFjay0xMDQxNDMwLWFsbG95LXNiZ2xmai1hY2MtcG9sLXRva2VuIiwiayI6IjRtb1lBS2U0dUM3MTB3NDJ3MVlSOTBGYiIsIm0iOnsiciI6InByb2QtdXMtZWFzdC0wIn19"
		}
	}
}
prometheus.exporter.self "default" {
}

prometheus.scrape "metamonitoring" {
  targets    = prometheus.exporter.self.default.targets
  forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.remote_write "default" {
  endpoint {
    url = "http://mimir:9009/api/v1/push"
  }
}
logging {
  level    = "warn"
  format   = "json"
  write_to = [loki.write.default.receiver]
}

loki.write "default" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}
tracing {
  sampling_fraction = 0.1
  write_to          = [otelcol.exporter.otlp.default.input]
}

otelcol.exporter.otlp "default" {
    client {
        endpoint = "tempo:4317"
    }
}

prometheus.exporter.unix "integrations_node_exporter" {
  disable_collectors = ["ipvs", "btrfs", "infiniband", "xfs", "zfs"]
  enable_collectors = ["meminfo"]

  filesystem {
    fs_types_exclude     = "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|tmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
    mount_points_exclude = "^/(dev|proc|run/credentials/.+|sys|var/lib/docker/.+)($|/)"
    mount_timeout        = "5s"
  }

  netclass {
    ignored_devices = "^(veth.*|cali.*|[a-f0-9]{15})$"
  }

  netdev {
    device_exclude = "^(veth.*|cali.*|[a-f0-9]{15})$"
  }
}

discovery.relabel "integrations_node_exporter" {
  targets = prometheus.exporter.unix.integrations_node_exporter.targets

  rule {
    target_label = "instance"
    replacement  = constants.hostname
  }

  rule {
    target_label = "job"
    replacement = "integrations/node_exporter"
  }
}

discovery.relabel "logs_integrations_integrations_node_exporter_journal_scrape" {
  targets = []

  rule {
    source_labels = ["__journal__systemd_unit"]
    target_label  = "unit"
  }

  rule {
    source_labels = ["__journal__boot_id"]
    target_label  = "boot_id"
  }

  rule {
    source_labels = ["__journal__transport"]
    target_label  = "transport"
  }

  rule {
    source_labels = ["__journal_priority_keyword"]
    target_label  = "level"
  }
}

prometheus.scrape "integrations_node_exporter" {
  scrape_interval = "15s"
  targets    = discovery.relabel.integrations_node_exporter.output
  forward_to = [prometheus.remote_write.local.receiver]
}

prometheus.remote_write "local" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
  }
}

loki.source.journal "logs_integrations_integrations_node_exporter_journal_scrape" {
  max_age       = "24h0m0s"
  relabel_rules = discovery.relabel.logs_integrations_integrations_node_exporter_journal_scrape.rules
  forward_to    = [loki.write.local.receiver]
}

local.file_match "logs_integrations_integrations_node_exporter_direct_scrape" {
  path_targets = [{
    __address__ = "localhost",
    __path__    = "/var/log/{syslog,messages,*.log}",
    instance    = constants.hostname,
    job         = "integrations/node_exporter",
  }]
}

loki.source.file "logs_integrations_integrations_node_exporter_direct_scrape" {
  targets    = local.file_match.logs_integrations_integrations_node_exporter_direct_scrape.targets
  forward_to = [loki.write.local.receiver]
}

loki.write "local" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}

livedebugging{}

prometheus.exporter.snmp "integrations_snmp" {

    //for private authentification profiles, set additional file with snmp_exporter auths:
    //https://github.com/prometheus/snmp_exporter/tree/main/generator#file-format
    //config_file = "/etc/alloy/auths.yml"
    //config_merge_strategy = "merge"

    target "network_switch_with_snmpd" {
        address = "127.0.0.1"
        module  = "system,if_mib,hrDevice,hrStorage"
        auth    = "public_v2"
    }
    target "network_switch_2" {
        address = "<host_address_2>"
        // append more vendor specific modules, i.e "cisco_device", or "juniper":
        module  = "system,if_mib"
        auth    = "<host_private_auth_from_file>"
    }
}
prometheus.scrape "integrations_snmp" {
    targets    = prometheus.exporter.snmp.integrations_snmp.targets
    forward_to = [prometheus.relabel.integrations_snmp.receiver]
    job_name   = "integrations/snmp"
    scrape_timeout = "30s"
}

prometheus.relabel "integrations_snmp" {
    forward_to = [prometheus.remote_write.metrics_service.receiver]
    rule {
        source_labels = ["job"]
        regex         = "(^.*snmp)\\/(.*)"
        target_label  = "job_snmp"
    }
    rule {
        source_labels = ["job"]
        regex         = "(^.*snmp)\\/(.*)"
        target_label  = "snmp_target"
        replacement   = "$2"
    }
    rule {
        source_labels = ["job"]
        regex         = "(^.*snmp)\\/(.*)"
        target_label  = "instance"
        replacement   = "$2"
    }
}


// Replace discovery.file with any discovery.* component
discovery.file "integrations_snmp" {
    files = ["/etc/alloy/targets.yml"]
}

// Relabel hidden labels you want to keep
// if you don't have any hidden labels in your Prometheus discovery, you can skip this step.
discovery.relabel "integrations_snmp" {
    targets = discovery.file.integrations_snmp.targets
    rule {
        action        = "replace"
        source_labels = ["__rack"]
        target_label  = "rack"
    }
}
prometheus.exporter.snmp "integrations_snmp" {
    //for private authentification profiles, set additional file with snmp_exporter auths:
    //https://github.com/prometheus/snmp_exporter/tree/main/generator#file-format
    //config_file = "/etc/alloy/auths.yml"
    //config_merge_strategy = "merge"
    targets = discovery.relabel.integrations_snmp.output
}

prometheus.scrape "integrations_snmp" {
    targets    = prometheus.exporter.snmp.integrations_snmp.targets
    forward_to = [prometheus.relabel.integrations_snmp.receiver]
    job_name   = "integrations/snmp"
    scrape_timeout = "30s"
}

prometheus.relabel "integrations_snmp" {
    forward_to = [prometheus.remote_write.metrics_service.receiver]
    rule {
        source_labels = ["job"]
        regex         = "(^.*snmp)\\/(.*)"
        target_label  = "job_snmp"
    }
    rule {
        source_labels = ["job"]
        regex         = "(^.*snmp)\\/(.*)"
        target_label  = "snmp_target"
        replacement   = "$2"
    }
    rule {
        source_labels = ["job"]
        regex         = "(^.*snmp)\\/(.*)"
        target_label  = "instance"
        replacement   = "$2"
    }
}

loki.source.syslog "integrations_snmp_3164" {
    listener {
        address = ":10514"
        syslog_format = "rfc3164"
        protocol = "udp"
        labels = {
            job = "syslog",
        }
    }
    forward_to = [loki.enrich.integrations_snmp.receiver]
    relabel_rules = loki.relabel.integrations_snmp.rules
}

loki.source.syslog "integrations_snmp_5424" {
    listener {
        address = ":10515"
        syslog_format = "rfc5424"
        protocol = "udp"
        labels = {
            job = "syslog",
        }
    }
    forward_to = [loki.enrich.integrations_snmp.receiver]
    relabel_rules = loki.relabel.integrations_snmp.rules
}

loki.relabel "integrations_snmp" {
    forward_to = []
    rule {
        source_labels = ["__syslog_message_hostname"]
        target_label  = "hostname"
    }
    rule {
        source_labels = ["__syslog_message_severity"]
        target_label  = "level"
    }
    rule {
        source_labels = ["__syslog_message_facility"]
        target_label  = "facility"
    }
    rule {
        source_labels = ["__syslog_message_app_name"]
        target_label  = "syslog_app_name"
    }
    rule {
        source_labels = ["__syslog_message_msg_id"]
        target_label  = "syslog_msg_id"
    }
}

// Enrich logs with device metadata
loki.enrich "integrations_snmp" {

    targets = discovery.file.network_devices.targets
    // List of labels to copy from discovered targets to logs
    labels_to_copy = [
        "datacenter",
        "rack",
    ]
    // Match on hostname/IP from logs
    target_match_label = "name"
    logs_match_label = "hostname"

    forward_to = [loki.relabel.integrations_snmp.receiver]
}

loki.relabel "integrations_snmp" {
    rule {
        replacement   = "integrations/snmp"
        target_label  = "job_snmp"
    }
    rule {
        source_labels = ["hostname"]
        target_label  = "snmp_target"
    }
    rule {
        source_labels = ["hostname"]
        target_label  = "instance"
    }
    forward_to = [loki.write.grafana_cloud_loki.receiver]
}

prometheus.exporter.self "integrations_alloy_health" { }

discovery.relabel "integrations_alloy_health" {
  targets = prometheus.exporter.self.integrations_alloy_health.targets

  rule {
    replacement = constants.hostname
    target_label  = "instance"
  }

  rule {
    target_label = "job"
    replacement  = "integrations/alloy"
  }
}

prometheus.scrape "integrations_alloy_health" {
  targets    = discovery.relabel.integrations_alloy_health.output
  forward_to = [prometheus.remote_write.metrics_service.receiver]
  job_name   = "integrations/alloy"
}

logging {
  write_to = [loki.process.logs_integrations_integrations_alloy_health.receiver]
}

loki.process "logs_integrations_integrations_alloy_health" {
  forward_to = [loki.relabel.logs_integrations_integrations_alloy_health.receiver]

  stage.regex {
    expression = "(level=(?P<log_level>[\\s]*debug|warn|info|error))"
  }
  
  stage.labels {
    values = {
      level = "log_level",
    }
  }
}

loki.relabel "logs_integrations_integrations_alloy_health" {

  forward_to = [loki.write.grafana_cloud_loki.receiver]

  rule {
    replacement = constants.hostname
    target_label  = "instance"
  }

  rule {
    target_label = "job"
    replacement  = "integrations/alloy"
  }
}

